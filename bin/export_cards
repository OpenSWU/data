#!/usr/bin/env ruby
# frozen_string_literal: true
libdir = File.expand_path(File.dirname(__FILE__) + '/../lib')
$LOAD_PATH.unshift(libdir) unless $LOAD_PATH.include?(libdir)

require "rubygems"
require "bundler/setup"

require "csv"
require "parsers/card_list/cards"

cache_dir = "tmp/cache/openswu-data/"
export_dir = "tmp/exports/"
export_file = "#{export_dir}cards.csv"

# Ensure the export directory exists
Dir.mkdir(export_dir) unless Dir.exist?(export_dir)

parser = Parsers::CardList::Cards.load_cache(cache_dir)

puts "=" * 80
puts "  OpenSWU Data â€” Export Cards"
puts "=" * 80
puts "\n#{parser.size} Cards to Export"

# Write to CSV
CSV.open(export_file, "wb") do |csv|
  csv << %w[id swu_card_id title subtitle card_number locale artist expansion_id front_art_url front_art_horizontal
            back_art_url back_art_horizontal has_foil hyperspace showcase play_cost base_hp base_power unique upgrade_hp
            upgrade_power rarity_id front_type_id back_type_id aspect_ids arena_ids trait_ids keyword_ids]
  parser.each do |card|
    csv << [card.id, card.card_id, card.title, card.subtitle, card.card_number, card.locale, card.artist,
            card.expansion_id, card.front_art_url, card.front_art_horizontal, card.back_art_url,
            card.back_art_horizontal, card.has_foil_printing, card.hyperspace_printing, card.showcase_printing,
            card.play_cost, card.base_hp, card.base_power, card.unique, card.upgrade_hp, card.upgrade_power,
            card.rarity_id, card.front_type_id, card.back_type_id, card.aspect_ids.join(";"), card.arena_ids.join(";"),
            card.trait_ids.join(";"), card.keyword_ids.join(";")]
  end
end

puts "\nCards exported to #{export_file}"
